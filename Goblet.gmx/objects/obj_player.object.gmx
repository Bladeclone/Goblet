<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>grav = 0.2;
facing = 1;
airFacing = 0;
hSpd = 0;
vSpd = 0;
jumpSpeed = 5;
runSpeed = 2;
grounded = 0;

//topSpeed = 7;
//accl = 2;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///ATTACK ANIM TIME
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///ATTACK TIME
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//inputs
key_right = keyboard_check(ord("D"));
key_left = -keyboard_check(ord("A"));
key_down = keyboard_check_pressed(ord("S"));
key_jump = keyboard_check_pressed(ord("L"));
key_shoot = keyboard_check_pressed(ord("K"));

//reactions to inputs
move = key_left + key_right;
hSpd = move * runSpeed;

if (move != 0)
{
    facing = move;
}

if (vSpd &lt; 10)
{
    vSpd += grav;
}

if (place_meeting(x, round(y+1), obj_block)) //you can only jump if you're on the floor
{
    block = instance_place(x, round(y+1), obj_block);
    if (y + 32 &lt; block.y)
    {
        if (alarm[1] = -1)
        {
            if (move != 0) //ANIMATIONS
            {
                sprite_index = spr_player_walk;
                image_speed = 1/10;
            }
            else
            {
                sprite_index = spr_player_idle;
            }
        }
        if(block.type == 2 and key_down) //phase down through platforms
        {
            sprite_index = spr_player_fall;
            y += 2;
        }
        vSpd = key_jump * -jumpSpeed;
        airFacing = move;
    }
}
else 
{
    if (alarm[1] = -1)
    {   
        if (vSpd &lt; 0)
        {
            sprite_index = spr_player_jump;
        }
        else
        {
            sprite_index = spr_player_fall;
        }
    }
    if(move != airFacing) //if player changes direction midair
    {
        hSpd *= 0.6;  //mid-air control diminishing
        airFacing = 0;
    }
}

//horizontal collision
if (place_meeting(x + hSpd, y, obj_block))
{
    block = instance_place(x + hSpd, y, obj_block);
    if (block.type != 2)
    {
        while (!place_meeting(x + sign(hSpd), y, obj_block))
        {
            x += sign(hSpd);
        }
        hSpd = 0;
    }

}

//vertical collision
if (sign(vSpd) == 1) 
{
    for(i = y; i &lt; y+vSpd; i += 1)
    {
        block = instance_place(x, i, obj_block);
        if (block != noone and (abs(block.x - x) &lt; 32) and block.y &gt; 31+y) //you should only collide with the platforms from above
        {
                smoke1 = instance_create(x,y+16,obj_jump_smoke);
                smoke1.facing = facing;
                smoke2 = instance_create(x,y+16,obj_jump_smoke);
                smoke2.facing = -facing;
                y = block.y-33;
                vSpd = 0;
                break;
        }
    }
}

        

if (key_shoot) //attack
{
    if (alarm[0] = -1)
    {
        alarm[0] = 15;
        sprite_index = spr_player_attack;
        attack = instance_create(x, y, obj_player_attack);
        attack.facing = facing;
        if (alarm[1] = -1)
        {
            alarm[1] = 10;
        }
    }
}

//FLIP IMAGE
if (move != 0)
{
    image_xscale = move;
}

x += hSpd;
y += vSpd;
view_xview = x - 210;
view_yview = y - 230;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
